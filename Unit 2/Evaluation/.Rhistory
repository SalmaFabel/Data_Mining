install.packages("nElemStatLearn")
install.packages("ElemStatLearn")
getwd()
setwd("C:\\Users\\salmi\\OneDrive\\Documentos\\GitHub\\Mineria-de-datos\\Evaluation")
getwd()
dataset = read.csv('Social_Network_Ads.csv')
install.packages("naivebayes")
library(naivebayes)
library(e1071)
install.packages("ElemStatLearn")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = naivebayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
classifier = naivebayes(formula = Purchased ~ .,
data = training_set,
type = 'naivebayes',
kernel = 'linear')
classifier = naivebayes(formula = Purchased ~ .,
data = training_set,
type = 'class')
classifier = naivebayes(formula = Purchased ~ .,
data = training_set,
type="class")
classifier = naivebayes(Survived ~ .,
data = training_set,
type="class")
classifier = naivebayes(Survived ~ .,
data = training_set)
library(naivebayes)
classifier = naivebayes(Survived ~ .,
data = training_set)
View(dataset)
#Naive Bayes requiere que todas las variables sean categorias por ende por
#simplicidad y facilitarnos  cambiaremos Purchased a la categoria 0. NO 1.SI
Purchased<- ifelse(dataset[,5]>0,"Yes",ifelse(dataset[,5]<0,"No","No"))
install.packages("caret")
library(caret)
#Naive Bayes requiere que todas las variables sean categorias por ende por
#simplicidad y facilitarnos  cambiaremos Purchased a la categoria 0. NO 1.SI
Purchased<- ifelse(dataset[,5]>0,"Yes",ifelse(dataset[,5]<0,"No","No"))
#Tenemos nuestro modelo naiveBayes va tratar de predecir Purchased
# en funcion a las otros pero solo tomando su trainin id
Naive_Bayes_Model <-naiveBayes(Purchased ~ ., data= model[t.ids,], type="class")
#Creamos un nuevo dataframe con solo los datos que necesitamos
model<- data.frame(dataset[1:4],Purchased)
View(model)
#agregamos la semilla que nos ayuda para dar aleteoridad
set.seed(2018)
# conjunto de entreamiento
# Partimos nuestros datos en el  conjunto de entrenamiento
#la variable Purchased es la cual queremos predecir si se ha
#efectuado o no una compra con una probabilidad de 0.67
t.ids <- createDataPartition(model$Purchased, p=0.6, list = F)
#Tenemos nuestro modelo naiveBayes va tratar de predecir Purchased
# en funcion a las otros pero solo tomando su trainin id
Naive_Bayes_Model <-naiveBayes(Purchased ~ ., data= model[t.ids,], type="class")
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = naiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
naiveBayes
getwd()
setwd("C:\\Users\\salmi\\OneDrive\\Documentos\\GitHub\\Mineria-de-datos\\Evaluation")
getwd()
dataset = read.csv('Social_Network_Ads.csv')
install.packages("naivebayes")
install.packages("naivebayes")
library(naivebayes)
library(e1071)
# Importing the dataset
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = naiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
naiveBayes
install.packages("naiveBayes")
library(naivebayes)
install.packages("naivebayes")
install.packages("naivebayes")
install.packages("naivebayes")
install.packages("naivebayes")
library(naivebayes)
classifier = naivebayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
classifier = naiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
classifier = naiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
getwd()
setwd("C:\\Users\\salmi\\OneDrive\\Documentos\\GitHub\\Mineria-de-datos\\Evaluation")
getwd()
dataset = read.csv('Social_Network_Ads.csv')
install.packages("naivebayes")
library(e1071)
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = naiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
naiveBayes
classifier = NaiveBayes(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
